image: docker:latest
services:
  - docker:dind

stages:
#   - test
  - deploy

# step-develop:
#   stage: test
#   before_script:
#     - export DYNAMIC_ENV_VAR=DEVELOP
#   only:
#     - develop
#   tags:
#     - develop
#   script:
#     - echo running tests in $DYNAMIC_ENV_VAR

# step-uat:
#   stage: deploy
# #   before_script:
# #     - export DYNAMIC_ENV_VAR=UAT
#   only:
#     - uat
#   tags:
#     - uat
#   script:
#     # - echo setting up env $DYNAMIC_ENV_VAR
#     - sudo apt-get install -y python-pip
#     - sudo pip install docker-compose
#     - sudo docker image prune -f
#     - sudo docker-compose -f docker-compose.yml build --no-cache
#     - sudo docker-compose -f docker-compose.yml up -d

# step-deploy-staging:
#   stage: deploy
#   before_script:
#     - export DYNAMIC_ENV_VAR=STAGING
#   only:
#     - staging
#   tags:
#     - staging
#   script:
#     - echo setting up env $DYNAMIC_ENV_VAR
#     - sudo apt-get install -y python-pip
#     - sudo pip install docker-compose
#     - sudo docker image prune -f
#     - sudo docker-compose -f docker-compose.yml build --no-cache
#     - sudo docker-compose -f docker-compose.yml up -d

step-deploy-production:
  stage: deploy
  before_script:
    - export DYNAMIC_ENV_VAR=PRODUCTION
  tags:
    - backend_master
  script:
    - echo setting up env $DYNAMIC_ENV_VAR
    - sudo apt-get install -y python-pip
    - sudo pip install docker-compose
    - sudo docker image prune -f
    - sudo docker-compose -f docker-compose.yml build --no-cache
    - sudo docker-compose -f docker-compose.yml up -d

#   when: manual

  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^master/ || $CI_COMMIT_REF_NAME =~ /^RELEASE/'

